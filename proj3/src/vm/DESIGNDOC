       	    +---------------------------+
		    |		CS 140				|
		    | PROJECT 3: VIRTUAL MEMORY	|
		    |	   DESIGN DOCUMENT		|
		    +---------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Caleb Simmeth <simmeth@usc.edu>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

			PAGE TABLE MANAGEMENT
			=====================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

struct page_info
{
  struct list_elem elem;
  uint8_t* user_vaddr;
  struct file * file;
  uint32_t read_bytes;
  uint32_t ofs;
  bool writable;
}
This is the entry in the supplemental page table. It records information
about what is stored in the page.

struct frame_info
{
  struct list_elem elem;
  void * kpage;
  void * upage;
  struct thread * owner;
}

This is an entry in the frame table. It stores the owner as well as
the associated user virtual page and kernel page;

In frame.c
struct list frame_table
This is the list that holds information about the user frames
that have been allocated.

struct lock frame_lock
This lock ensures that multiple threads are not adding and
removing frames at the same time.

In thread.h
Added to struct thread
struct list supp_page_table;
Contains the virtual pages that the thread has allocated and information
about what data is associated with them.
		
---- ALGORITHMS ----

>> A2: In a few paragraphs, describe your code for locating the frame,
>> if any, that contains the data of a given page.

First the program consults the page table to determine if there
is a frame currently associated with virtual page. If there is not,
then there is a page fault. When this happens, the fault handler
checks the supplemental page table to see if there is data associated
with that page. If there is not, the program is stopped.

If an entry in the supplemental page table is found, then the fault
handler allocates a new frame from the frame table, and loads
the data into the frame. It then adds an entry to the page table
for that program and returns.

On return from the page fault, the process tries to look up the
address in the page table again. This time there is an associated
frame with the correct data.

>> A3: How does your code coordinate accessed and dirty bits between
>> kernel and user virtual addresses that alias a single frame, or
>> alternatively how do you avoid the issue?

When checking for dirty bits I check both the user and kernel virtual
addresses. This ensures that if the file has been updated from either
address my code can handle it.

---- SYNCHRONIZATION ----

>> A4: When two user processes both need a new frame at the same time,
>> how are races avoided?

The frame table has a lock associated with it. It is essentially a
synchronized object, and if a process is currently being allocated
a frame, the next one will have to wait on the frame table lock.

---- RATIONALE ----

>> A5: Why did you choose the data structure(s) that you did for
>> representing virtual-to-physical mappings?

I chose a list because it was the simplest to implement. The supplemental
page table is per-process, so even if iterating through the list is
O(n) time, there will only be as many pages as that user process 
has allocated. This also allowed for simple removal from the list.


		       PAGING TO AND FROM DISK
		       =======================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> B2: When a frame is required but none is free, some frame must be
>> evicted.  Describe your code for choosing a frame to evict.

>> B3: When a process P obtains a frame that was previously used by a
>> process Q, how do you adjust the page table (and any other data
>> structures) to reflect the frame Q no longer has?

>> B4: Explain your heuristic for deciding whether a page fault for an
>> invalid virtual address should cause the stack to be extended into
>> the page that faulted.

I check that the address that caused a page fault is within 32 bytes
of the stack pointer. If it is, I allocate a new page and frame to 
grow the stack.

---- SYNCHRONIZATION ----

>> B5: Explain the basics of your VM synchronization design.  In
>> particular, explain how it prevents deadlock.  (Refer to the
>> textbook for an explanation of the necessary conditions for
>> deadlock.)

>> B6: A page fault in process P can cause another process Q's frame
>> to be evicted.  How do you ensure that Q cannot access or modify
>> the page during the eviction process?  How do you avoid a race
>> between P evicting Q's frame and Q faulting the page back in?

>> B7: Suppose a page fault in process P causes a page to be read from
>> the file system or swap.  How do you ensure that a second process Q
>> cannot interfere by e.g. attempting to evict the frame while it is
>> still being read in?

>> B8: Explain how you handle access to paged-out pages that occur
>> during system calls.  Do you use page faults to bring in pages (as
>> in user programs), or do you have a mechanism for "locking" frames
>> into physical memory, or do you use some other design?  How do you
>> gracefully handle attempted accesses to invalid virtual addresses?

---- RATIONALE ----

>> B9: A single lock for the whole VM system would make
>> synchronization easy, but limit parallelism.  On the other hand,
>> using many locks complicates synchronization and raises the
>> possibility for deadlock but allows for high parallelism.  Explain
>> where your design falls along this continuum and why you chose to
>> design it this way.

			 MEMORY MAPPED FILES
			 ===================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

In struct thread:
struct list mmaps;
This is a list of memmory mapped files. It has the same structure
as the file list, and containes file_info elements. These elements
hold a pointer to the file as well as an id number associated with it.

---- ALGORITHMS ----

>> C2: Describe how memory mapped files integrate into your virtual
>> memory subsystem.  Explain how the page fault and eviction
>> processes differ between swap pages and other pages.

When mapping a file, I create a new entry in the supplimental
page table for each page of memory that will be mapped. I also
record the file that will be mapped, and the location within
the file to map. When the program page_faults on that virtual 
address, the fault handler loads the memory from the file
into a new frame. I know that this is not a swap because the 
supplimental page table records  if it has been placed
in the swap.

>> C3: Explain how you determine whether a new file mapping overlaps
>> any existing segment.

Before allocating a new page, I check to see if the virtual addressi
is already mapped to something in the supplimental page table. 
If it is, that means that it will overlap something else.

---- RATIONALE ----

>> C4: Mappings created with "mmap" have similar semantics to those of
>> data demand-paged from executables, except that "mmap" mappings are
>> written back to their original files, not to swap.  This implies
>> that much of their implementation can be shared.  Explain why your
>> implementation either does or does not share much of the code for
>> the two situations.



			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
